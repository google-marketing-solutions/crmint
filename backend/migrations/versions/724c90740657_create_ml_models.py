# Copyright 2023 Google Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Create ML Models

Revision ID: 724c90740657
Revises: 71caf3e9e2fb
Create Date: 2023-03-09 22:50:59.391800

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '724c90740657'
down_revision = '71caf3e9e2fb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ml_models',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('unique_id', sa.String(length=255), nullable=False),
    sa.Column('uses_first_party_data', sa.Boolean(), nullable=False),
    sa.Column('skew_factor', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ml_model_bigquery_dataset',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ml_model_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], ),
    sa.PrimaryKeyConstraint('ml_model_id')
    )
    op.create_table('ml_model_features',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ml_model_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], ),
    sa.PrimaryKeyConstraint('ml_model_id', 'name')
    )
    op.create_table('ml_model_hyper_parameters',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ml_model_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('value', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], ),
    sa.PrimaryKeyConstraint('ml_model_id', 'name')
    )
    op.create_table('ml_model_label',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ml_model_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.Column('key', sa.String(length=255), nullable=True),
    sa.Column('value_type', sa.String(length=255), nullable=True),
    sa.Column('is_revenue', sa.Boolean(), nullable=True),
    sa.Column('is_score', sa.Boolean(), nullable=True),
    sa.Column('is_percentage', sa.Boolean(), nullable=True),
    sa.Column('is_conversion', sa.Boolean(), nullable=True),
    sa.Column('average_value', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], ),
    sa.PrimaryKeyConstraint('ml_model_id')
    )
    op.create_table('ml_model_timespans',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ml_model_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('unit', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], ),
    sa.PrimaryKeyConstraint('ml_model_id', 'name')
    )
    with op.batch_alter_table('enqueued_tasks', schema=None) as batch_op:
        batch_op.alter_column('task_namespace',
               existing_type=mysql.VARCHAR(length=100),
               type_=sa.String(length=60),
               existing_nullable=True)
        batch_op.alter_column('task_name',
               existing_type=mysql.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)

    with op.batch_alter_table('pipelines', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ml_model_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'ml_models', ['ml_model_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('pipelines', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('ml_model_id')

    with op.batch_alter_table('enqueued_tasks', schema=None) as batch_op:
        batch_op.alter_column('task_name',
               existing_type=sa.String(length=100),
               type_=mysql.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('task_namespace',
               existing_type=sa.String(length=60),
               type_=mysql.VARCHAR(length=100),
               existing_nullable=True)

    op.drop_table('ml_model_timespans')
    op.drop_table('ml_model_label')
    op.drop_table('ml_model_hyper_parameters')
    op.drop_table('ml_model_features')
    op.drop_table('ml_model_bigquery_dataset')
    op.drop_table('ml_models')
    # ### end Alembic commands ###
