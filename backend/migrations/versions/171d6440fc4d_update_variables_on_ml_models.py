# Copyright 2023 Google Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Transition from features/label to variables in ML models.

Revision ID: 171d6440fc4d
Revises: 2bf97a4419d7
Create Date: 2023-06-30 19:12:08.603280

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '171d6440fc4d'
down_revision = '2bf97a4419d7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ml_model_variables',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('ml_model_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=255), nullable=True),
    sa.Column('key', sa.String(length=255), nullable=True),
    sa.Column('value_type', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], ),
    sa.PrimaryKeyConstraint('ml_model_id', 'name')
    )
    op.execute("""
      INSERT INTO ml_model_variables
      (created_at, updated_at, ml_model_id, name, source, role)
      SELECT
        created_at,
        updated_at,
        ml_model_id,
        name,
        source,
        'FEATURE'
      FROM ml_model_features
    """)
    op.execute("""
      INSERT INTO ml_model_variables
      (created_at, updated_at, ml_model_id, name, source, role, `key`, value_type)
      SELECT
        created_at,
        updated_at,
        ml_model_id,
        name,
        source,
        'LABEL',
        `key`,
        value_type
      FROM ml_model_label
    """)
    with op.batch_alter_table('ml_model_output_parameters', schema=None) as batch_op:
        batch_op.add_column(sa.Column('average_conversion_value', sa.Float(), nullable=True))
    op.execute("""
      CREATE PROCEDURE MigrateACV()
        BEGIN
          DECLARE m_done INT DEFAULT 0;
          DECLARE m_ml_model_id INT;
          DECLARE m_average_value FLOAT;
          DECLARE curs CURSOR FOR SELECT ml_model_id, average_value FROM ml_model_label;
          DECLARE CONTINUE HANDLER FOR NOT FOUND SET m_done = 1;

          OPEN curs;
          REPEAT
            FETCH curs INTO m_ml_model_id, m_average_value;

            IF m_average_value > 0 THEN
              UPDATE ml_model_output_parameters
              SET average_conversion_value = m_average_value
              WHERE ml_model_id = m_ml_model_id;
            END IF;
          UNTIL m_done END REPEAT;
          CLOSE curs;
        END;
    """)
    op.execute('CALL MigrateACV()')
    op.execute('DROP PROCEDURE IF EXISTS MigrateACV')
    op.drop_table('ml_model_label')
    op.drop_table('ml_model_features')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ml_model_output_parameters', schema=None) as batch_op:
        batch_op.drop_column('average_conversion_value')

    op.create_table('ml_model_features',
    sa.Column('created_at', mysql.DATETIME(), nullable=False),
    sa.Column('updated_at', mysql.DATETIME(), nullable=False),
    sa.Column('ml_model_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('source', mysql.VARCHAR(length=255), nullable=False),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], name='ml_model_features_ibfk_1'),
    sa.PrimaryKeyConstraint('ml_model_id', 'name'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('ml_model_label',
    sa.Column('created_at', mysql.DATETIME(), nullable=False),
    sa.Column('updated_at', mysql.DATETIME(), nullable=False),
    sa.Column('ml_model_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('source', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('key', mysql.VARCHAR(length=255), nullable=True),
    sa.Column('value_type', mysql.VARCHAR(length=255), nullable=True),
    sa.Column('average_value', mysql.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['ml_model_id'], ['ml_models.id'], name='ml_model_label_ibfk_1'),
    sa.PrimaryKeyConstraint('ml_model_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.drop_table('ml_model_variables')
    # ### end Alembic commands ###
